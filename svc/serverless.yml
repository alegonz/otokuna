# Notes on capitalization and style:
# * camelCase for Serverless parameters (including plugins)
#   - e.g. frameworkVersion, iamRoleStatements, stepFunctions
# * CamelUpperCase for AWS parameters
#   - e.g. ItemsPath parameter of AWS step
# * CamelUpperCase for state machines and states
#   - e.g. DumpMachine, DumpMap
# * snake_case for application-specific parameters:
#   - e.g. base_path
# * kebab-case for service and function names
#   - e.g. dump-svc, generate-base-path-daily

service: predict-svc
app: otokuna
# org: is passed via command-line arg

frameworkVersion: "2"

plugins:
  - serverless-python-requirements
  - serverless-step-functions
custom:
  # TODO: Package requirements independently
  #  The S3 path generator should be lightweight
  pythonRequirements:
    pythonBin: ../.venv/bin/python3
    fileName: requirements.txt
    pipCmdExtraArgs:
      - '--no-index --find-links=wheelhouse'
    dockerizePip: non-linux
    slim: true
  output_bucket: ${file(params.yml):output_bucket}-${opt:stage}
  model_path: regressor.onnx

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${opt:stage}
  region: us-east-1
  environment:
    OUTPUT_BUCKET: ${self:custom.output_bucket}
  stackTags:
    otokuna:git-repo-name: ${env:GIT_REPO_NAME}
    otokuna:git-branch: ${env:GIT_BRANCH}
    otokuna:git-commit-hash-short: ${env:GIT_COMMIT_HASH_SHORT}
    otokuna:git-is-dirty: ${env:GIT_IS_DIRTY}
  # TODO: The roles should be customized per function
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:custom.output_bucket}"
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:custom.output_bucket}/*"

# TODO: package individually
package:
  exclude:
    - "**/*"
  include:
    - build_search_url.py
    - dump_property_data.py
    - generate_base_path.py
    - zip_property_data.py
    - scrape_property_data.py
    - predict.py
    - save_job_info.py
    - ${self:custom.model_path}

functions:
  generate-base-path-daily:
    handler: generate_base_path.main_daily
    memorySize: 128
  generate-base-path-user-requested:
    handler: generate_base_path.main_user_requested
    memorySize: 128
  build-search-url:
    handler: build_search_url.main
    timeout: 30
    memorySize: 128
  dump-property-data:
    handler: dump_property_data.main
    timeout: 300  # 5 min. max of AWS Lambda is 15 min
    memorySize: 256  # observed value of ~154 MB + leeway
    # TODO: consider limiting the number of attempts
    # maximumRetryAttempts: 1
  zip-property-data:
    handler: zip_property_data.main
    timeout: 90  # 1.5 min, observed value of ~30s x 3
    memorySize: 256  # observed value of ~113 MB x 2
  scrape-property-data:
    handler: scrape_property_data.main
    timeout: 480  # observed value of ~3.6m x 2
    memorySize: 2048  # observed value of ~360 MB x 5.6
  predict:
    handler: predict.main
    timeout: 300
    memorySize: 2048
    environment:
      MODEL_PATH: ${self:custom.model_path}
  save-job-info:
    handler: save_job_info.main
    timeout: 30
    memorySize: 128

stepFunctions:
  stateMachines:
    PredictDailyMachine:
      events:
        - schedule:
            rate: cron(0 12 * * ? *)  # every day at 12:00 UTC == 21:00 JST
            input:
              tokyo_wards: ${file(params.yml):tokyo_wards}
      definition:
        StartAt: GenerateBasePath
        States:
          GenerateBasePath:
            Type: Task
            Resource:
              Fn::GetAtt: [generate-base-path-daily, Arn]
            Next: DumpMap
          DumpMap:
            Type: Map
            ItemsPath: $.tokyo_wards
            ResultPath: $.map_result
            Parameters:
              batch_name.$: $$.Map.Item.Value
              base_path.$: $.base_path
            Iterator:
              StartAt: build_search_url_step
              States:
                build_search_url_step:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [build-search-url, Arn]
                  Next: dump_step
                dump_step:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [dump-property-data, Arn]
                  End: true
            Next: ZipPropertyData
          ZipPropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [zip-property-data, Arn]
            Next: ScrapePropertyData
          ScrapePropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [scrape-property-data, Arn]
            Next: Predict
          Predict:
            Type: Task
            Resource:
              Fn::GetAtt: [predict, Arn]
            End: true

    PredictUserRequestedMachine:
      definition:
        StartAt: GenerateBasePath
        States:
          GenerateBasePath:
            Type: Task
            Resource:
              Fn::GetAtt: [ generate-base-path-user-requested, Arn ]
            Next: DumpPropertyData
          DumpPropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [ dump-property-data, Arn ]
            Next: ZipPropertyData
          ZipPropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [ zip-property-data, Arn ]
            Next: ScrapePropertyData
          ScrapePropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [ scrape-property-data, Arn ]
            Next: Predict
          Predict:
            Type: Task
            Resource:
              Fn::GetAtt: [ predict, Arn ]
            Next: SaveJobInfo
          SaveJobInfo:
            Type: Task
            Resource:
              Fn::GetAtt: [ save-job-info, Arn ]
            End: true
