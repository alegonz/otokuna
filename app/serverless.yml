# Notes on capitalization and style:
# * camelCase for Serverless parameters (including plugins)
#   - e.g. frameworkVersion, iamRoleStatements, stepFunctions
# * CamelUpperCase for AWS parameters
#   - e.g. ItemsPath parameter of AWS step
# * CamelUpperCase for state machines and states
#   - e.g. DumpMachine, DumpMap
# * snake_case for application-specific parameters:
#   - e.g. output_bucket
# * kebab-case for service and function names
#   - e.g. dump-svc, generate-base-path

service: dump-svc
app: otokuna
# org: is passed via command-line arg

frameworkVersion: "2"

plugins:
  - serverless-python-requirements
  - serverless-step-functions
custom:
  # TODO: Package requirements independently
  #  The S3 path generator should be lightweight
  pythonRequirements:
    pythonBin: ../.venv/bin/python3
    fileName: requirements/svc.txt
    dockerizePip: non-linux
    slim: true
  # every day at 12:00 UTC == 21:00 JST
  rate: cron(0 12 * * ? *)
  output_bucket: ${file(params.yml):output_bucket}-${opt:stage}

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  stage: ${opt:stage}
  region: us-east-1
  # TODO: The roles should be customized per function
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: "arn:aws:s3:::${self:custom.output_bucket}"
    - Effect: Allow
      Action:
        - s3:DeleteObject
        - s3:GetObject
        - s3:PutObject
      Resource: "arn:aws:s3:::${self:custom.output_bucket}/*"

# TODO: package individually
package:
  exclude:
    - "**/*"
  include:
    - dump_property_data.py
    - generate_base_path.py
    - zip_property_data.py
    - scrape_property_data.py

functions:
  generate-base-path:
    handler: generate_base_path.main
    memorySize: 128
    description: ${env:GIT_DESCRIPTION}
  dump-property-data:
    handler: dump_property_data.main
    timeout: 300  # 5 min. max of AWS Lambda is 15 min
    memorySize: 256  # observed value of ~154 MB + leeway
    # TODO: consider limiting the number of attempts
    # maximumRetryAttempts: 1
    description: ${env:GIT_DESCRIPTION}
  zip-property-data:
    handler: zip_property_data.main
    timeout: 90  # 1.5 min, observed value of ~30s x 3
    memorySize: 256  # observed value of ~113 MB x 2
    description: ${env:GIT_DESCRIPTION}
  scrape-property-data:
    handler: scrape_property_data.main
    timeout: 480  # observed value of ~3.6m x 2
    memorySize: 2048  # observed value of ~360 MB x 5.6
    description: ${env:GIT_DESCRIPTION}

stepFunctions:
  stateMachines:
    DumpMachine:
      events:
        - schedule:
            rate: ${self:custom.rate}
            input:
              output_bucket: ${self:custom.output_bucket}
              tokyo_wards: ${file(params.yml):tokyo_wards}
      definition:
        Comment: |
          A state machine that dumps and scrapes property data.
          ${env:GIT_DESCRIPTION}
        StartAt: GenerateBasePath
        States:
          GenerateBasePath:
            Type: Task
            Resource:
              Fn::GetAtt: [generate-base-path, Arn]
            Next: DumpMap
          DumpMap:
            Type: Map
            ItemsPath: $.tokyo_wards
            ResultPath: $.map_result
            Parameters:
              ward.$: $$.Map.Item.Value
              output_bucket.$: $.output_bucket
              base_path.$: $.base_path
            Iterator:
              StartAt: dump_step
              States:
                dump_step:
                  Type: Task
                  Resource:
                    Fn::GetAtt: [dump-property-data, Arn]
                  End: true
            Next: ZipPropertyData
          ZipPropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [zip-property-data, Arn]
            Next: ScrapePropertyData
          ScrapePropertyData:
            Type: Task
            Resource:
              Fn::GetAtt: [scrape-property-data, Arn]
            End: true
