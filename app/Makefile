HERE:=$(shell dirname $(abspath $(lastword $(MAKEFILE_LIST))))
include $(HERE)/../Makefile

.PHONY: test
test: venv
	$(VENV)/pip install -e .
	$(VENV)/pytest tests/

~/.serverless/bin/sls:
	curl -o- -L https://slss.io/install | bash

.PHONY: serverless
serverless: ~/.serverless/bin/sls

package-lock.json: plugins.in
	@for plugin_name in $$(cat plugins.in); do \
	    sls plugin install --name $${plugin_name} --stage $(STAGE); \
	done

.PHONY: plugins | serverless
plugins: package-lock.json

# Note: the relative paths in the requirements files are relative to the
#   directory from where pip is invoked.
requirements.txt: ../requirements/svc.txt
	@(cd .. && $(VENV)/pip wheel -r requirements/svc.txt -w app/wheelhouse) \
	&& echo '# This is file is autogenerated by Makefile' > requirements.txt \
	&& echo '# To update run: make requirements.txt' >> requirements.txt \
	&& tail -n +7 ../requirements/svc.txt >> requirements.txt \
	&& sed -i 's/-e file:libs#egg=//' requirements.txt

.PHONY: _sls_deps
_sls_deps: plugins requirements.txt | serverless

ifneq (,$(filter $(MAKECMDGOALS),package deploy remove))
ifndef SERVERLESS_ORG
$(error SERVERLESS_ORG is not set)
endif
endif
STAGE?=dev
SERVERLESS_ARGS=--stage $(STAGE) --org $(SERVERLESS_ORG)

export GIT_REPO_NAME = $(shell basename "$$(git rev-parse --show-toplevel)")
export GIT_BRANCH = $(shell git rev-parse --abbrev-ref HEAD)
export GIT_COMMIT_HASH_SHORT = $(shell git rev-parse --short HEAD)
export GIT_IS_DIRTY = $(shell if [ -n "$$(git diff HEAD)" ]; then echo true; else echo false; fi)

# It is safer to clean the cache of serverless-python-requirements
# to avoid missing packaging changes to the libs.
.PHONY: _clean_sls_py_req
_clean_sls_py_req: | serverless
	sls requirements clean $(SERVERLESS_ARGS)
	sls requirements cleanCache $(SERVERLESS_ARGS)

.PHONY: package
package: _sls_deps _clean_sls_py_req
	sls package $(SERVERLESS_ARGS)

.PHONY: _sls_deps
deploy: _sls_deps _clean_sls_py_req
	sls deploy $(SERVERLESS_ARGS)

.PHONY: remove
remove: | serverless
	sls remove $(SERVERLESS_ARGS)
